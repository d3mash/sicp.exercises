#lang racket
(define (scale-tree-simple tree factor)
  (cond ((null? tree) null)
        ((not (pair? tree)) (* tree factor))
        (else (cons (scale-tree-simple (car tree) factor)
                     (scale-tree-simple (cdr tree) factor)))))
(define (scale-tree tree factor)
  (map (lambda (sub-tree)
       (if (pair? sub-tree)
           (scale-tree sub-tree factor)
           (* sub-tree factor)))
     tree))

(scale-tree-simple (list 1 (list 2 (list 3 4) 5) (list 6 7))
            10)