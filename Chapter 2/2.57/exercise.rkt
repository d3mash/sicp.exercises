#lang racket
(require (except-in "../deriv/deriv-primitives.rkt"
                    augend
                    multiplier)
         (except-in (file "../2.56/exercise.rkt")
                    deriv))

(define (augend expression)
  (let ((remaining (cdddr expression)))
    (if (pair? remaining)
        (cons '+ (cddr expression))
        (caddr expression))))

(define (multiplier expression)
  (let ((remaining (cdddr expression)))
    (if (pair? remaining)
        (cons '* (cddr expression))
        (caddr expression))))
(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp)
         (if (same-variable? exp var) 1 0))
        ((sum? exp)
         (make-sum (deriv (addend exp) var)
                   (deriv (augend exp) var)))
        ((product? exp)
         (make-sum (make-product (multiplier exp)
                                 (deriv (multiplicand exp) var))
                   (make-product (deriv (multiplier exp) var)
                                 (multiplicand exp))))
        ((exp? exp)
         (make-product (make-product (exponent exp)
                                     (make-exponentiation (base exp)
                                                          (- (exponent exp) 1)))
                       (deriv (base exp) var)))
        (else (error "Unknown type of expression"))))

(provide (all-defined-out))
